trigger:
  branches:
    include:
      - main
      - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: sqlserver-test-db

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.10'

  - script: |
      curl -sSL https://install.python-poetry.org | python3 -
    displayName: Install Poetry

  - script: |
      export PATH="$HOME/.local/bin:$PATH"
      poetry config virtualenvs.in-project true
      poetry install --with dev
    displayName: Install Dependencies

  - script: |
      docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=${DB_PASS}" -p 1433:1433 -d mcr.microsoft.com/mssql/server:2019-latest
      echo "Waiting for SQL Server to be ready..."
      sleep 20
    displayName: Start SQL Server in Docker

  - script: |
      export PATH="$HOME/.local/bin:$PATH"
      export DATABASE_URL="mssql+pyodbc://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?driver=${DB_DRIVER}"
      poetry run pytest -m integration --maxfail=1 -q
    displayName: Run Integration Tests
    env:
      DB_USER: $(DB_USER)
      DB_PASS: $(DB_PASS)
      DB_HOST: $(DB_HOST)
      DB_PORT: $(DB_PORT)
      DB_NAME: $(DB_NAME)
      DB_DRIVER: $(DB_DRIVER)

- script: |
    set -e  # Fail fast if any command fails
    export PATH="$HOME/.local/bin:$PATH"
    export DATABASE_URL="mssql+pyodbc://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?driver=${DB_DRIVER}"
    echo "Using DATABASE_URL: mssql+pyodbc://${DB_USER}:****@${DB_HOST}:${DB_PORT}/${DB_NAME}?driver=${DB_DRIVER}"
    poetry run pytest -m integration --maxfail=1 -q
  displayName: Run Integration Tests
  env:
    DB_USER: $(DB_USER)
    DB_PASS: $(DB_PASS)
    DB_HOST: $(DB_HOST)
    DB_PORT: $(DB_PORT)
    DB_NAME: $(DB_NAME)
    DB_DRIVER: $(DB_DRIVER)

- script: |
    docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=${DB_PASS}" -p 1433:1433 -d --name sqltest mcr.microsoft.com/mssql/server:2019-latest

    echo "Waiting for SQL Server to be ready..."
    for i in {1..30}; do
      docker exec sqltest /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${DB_PASS}" -Q "SELECT 1" && break
      echo "SQL Server not ready yet..."
      sleep 2
    done
  displayName: Start and wait for SQL Server
  env:
    DB_PASS: $(DB_PASS)

