trigger:
  branches:
    include:
      - main
      - dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: RISKENGINE_SECRET
  - name: VENV_DIR
    value: $(Pipeline.Workspace)/.venv

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.10'
      addToPath: true

  - script: |
      curl -sSL https://install.python-poetry.org | python3 -
      echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
    displayName: Install Poetry

  - script: |
      export PATH="$HOME/.local/bin:$PATH"
      poetry config virtualenvs.in-project true
      poetry install --with dev
    displayName: Install Dependencies

  - script: |
      docker network create sqlnet
    displayName: Create shared Docker network

  - script: |
      docker run -e "ACCEPT_EULA=Y" \
                 -e "SA_PASSWORD=${DB_PASS}" \
                 --network sqlnet \
                 --name sqltest \
                 -p 1433:1433 \
                 -d mcr.microsoft.com/mssql/server:2019-latest

      echo "Waiting for SQL Server to accept TCP connections..."
      for i in {1..30}; do
        nc -z localhost 1433 && echo "SQL Server ready" && break
        echo "Still waiting... ($i)"
        sleep 2
      done
    displayName: Start SQL Server
    env:
      DB_PASS: $(DB_PASS)

  - script: |
      chmod 644 $(Build.SourcesDirectory)/init.sql
      docker run --rm \
        --network sqlnet \
        -v $(Build.SourcesDirectory)/init.sql:/init.sql \
        mcr.microsoft.com/mssql-tools \
        /bin/bash -c "/opt/mssql-tools/bin/sqlcmd -S sqltest -U sa -P ${DB_PASS} -i /init.sql"
    displayName: Run init.sql against SQL Server
    env:
      DB_PASS: $(DB_PASS)

  - script: |
      export PATH="$HOME/.local/bin:$PATH"
      poetry check
    displayName: Poetry Check

  - script: |
      export PATH="$HOME/.local/bin:$PATH"
      poetry run black --check --diff .
    displayName: Check Code Format with Black

  - script: |
      export PATH="$HOME/.local/bin:$PATH"
      poetry run ruff check .
    displayName: Lint with Ruff

  - script: |
      export PATH="$HOME/.local/bin:$PATH"
      poetry run bandit -r . -c bandit.yaml --exit-zero --quiet
    displayName: Bandit Security Scan

  - script: |
      export PATH="$HOME/.local/bin:$PATH"
      poetry run detect-secrets scan src test > tmp.secrets.baseline
      grep '"is_secret": true' tmp.secrets.baseline && echo "Secrets found!" && exit 1 || echo "No secrets detected."
    displayName: Secret Scan (src & test)

  - script: |
      set -e  # Fail fast if any command fails
      export PATH="$HOME/.local/bin:$PATH"
      export DATABASE_URL="mssql+pyodbc://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?driver=${DB_DRIVER}"
      echo "Using DATABASE_URL: mssql+pyodbc://${DB_USER}:****@${DB_HOST}:${DB_PORT}/${DB_NAME}?driver=${DB_DRIVER}"
      poetry run pytest -m integration || echo "No integration tests found"
    displayName: Run Integration Tests
    env:
      DB_USER: $(DB_USER)
      DB_PASS: $(DB_PASS)
      DB_HOST: $(DB_HOST)
      DB_PORT: $(DB_PORT)
      DB_NAME: $(DB_NAME)
      DB_DRIVER: $(DB_DRIVER)
