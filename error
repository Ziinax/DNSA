# Dockerfile.test
FROM python:3.10-slim

RUN apt-get update && \
    apt-get install -y curl gnupg apt-transport-https unixodbc-dev gcc g++ && \
    curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \
    curl https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list && \
    apt-get update && \
    ACCEPT_EULA=Y apt-get install -y msodbcsql17 mssql-tools && \
    apt-get clean

ENV PATH="/root/.local/bin:$PATH"

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 -

WORKDIR /app

# Copy project files
COPY pyproject.toml poetry.lock ./
RUN poetry config virtualenvs.create false && poetry install --with dev

# Copy app & tests & init.sql
COPY . .

# Entrypoint will run init.sql and then tests
CMD /bin/bash -c "\
  echo 'Running init.sql against SQL Server...' && \
  /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P YourStrong!Passw0rd -i ./init.sql && \
  echo 'Running integration tests...' && \
  pytest -m integration"


version: '3.8'

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqltest
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "YourStrong!Passw0rd"
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong!Passw0rd -Q 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 10

  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      DATABASE_URL: "mssql+pyodbc://sa:YourStrong!Passw0rd@sqlserver:1433/tempdb?driver=ODBC+Driver+17+for+SQL+Server"
    depends_on:
      sqlserver:
        condition: service_healthy


docker-compose up --build test
time="2025-04-10T23:55:26+02:00" level=warning msg="C:\\Users\\omarnissi\\PycharmProjects\\RISKENGINE\\docker-compose.yml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion"
unable to get image 'riskengine-test': error during connect: in the default daemon configuration on Windows, the docker client must be run with elevated privileges to connect: Get "http://%2F%2F.%2Fpipe%2Fdocker_engine/v1.48/images/riskengine-test/json": open //./pipe/docker_engine: Le fichier spÃ©cifiÃ© est introuvable.



- script: |
              curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
              curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
              sudo apt-get update
              sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 unixodbc-dev
            displayName: Install ODBC Driver for SQL Server


- stage: version_patch
  displayName: Bump Version Patch (Poetry)
  dependsOn: integration
  condition: succeeded()
  jobs:
    - job: patch
      displayName: Bump Patch Version with Poetry
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.10'

        - script: |
            curl -sSL https://install.python-poetry.org | python3 -
          displayName: Install Poetry

        - script: |
            git config --global user.name "CI Bot"
            git config --global user.email "ci@yourdomain.com"

            export PATH="$HOME/.local/bin:$PATH"
            poetry version patch
            echo "ðŸ“¦ Bumped version to $(poetry version -s)"

            git add pyproject.toml
            git commit -m "ci: bump patch version to $(poetry version -s)"
            git push origin HEAD:$(Build.SourceBranchName)
          displayName: Patch version and commit


poetry self add poetry-dynamic-versioning

[tool.dynamic-versioning]
enable = true
style = "pep440"
pattern = "v(?P<base>\\d+\\.\\d+\\.\\d+)"

git tag v1.2.3
git push origin v1.2.3

- stage: build_package
  displayName: Build with Dynamic Version
  dependsOn: integration
  condition: succeeded()
  jobs:
    - job: build
      displayName: Build Python package
      pool:
        vmImage: ubuntu-latest
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.10'

        - checkout: self
          fetchDepth: 0  # IMPORTANT: Ensures Git tags are available

        - script: |
            curl -sSL https://install.python-poetry.org | python3 -
            echo "export PATH=$HOME/.local/bin:$PATH" >> $BASH_ENV
          displayName: Install Poetry

        - script: |
            export PATH="$HOME/.local/bin:$PATH"
            poetry self add poetry-dynamic-versioning
            poetry install --no-root
          displayName: Install Dependencies and Dynamic Versioning Plugin

        - script: |
            export PATH="$HOME/.local/bin:$PATH"
            echo "Git version tag detected: $(git describe --tags)"
            echo "Poetry resolved version: $(poetry version -s)"
            poetry build
          displayName: Build Project with Dynamic Version

        - publish: $(Build.SourcesDirectory)/dist
          artifact: python-package
          displayName: Publish Build Artifacts



